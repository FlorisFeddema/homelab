apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ .Values.database.clusterName }}
  labels:
    app.kubernetes.io/name: {{ template "immich.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: "immich"
    {{- include "labels" . | nindent 4 }}
spec:
  instances: {{ .Values.database.replicas }}
  imageName: {{ .Values.database.image.registry }}/{{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}

  postgresql:
    shared_preload_libraries:
      - "vectors.so"


  logLevel: warning

  bootstrap:
    initdb:
      postInitApplicationSQL:
        - CREATE EXTENSION IF NOT EXISTS "vectors";
        - CREATE EXTENSION IF NOT EXISTS "cube";
        - CREATE EXTENSION IF NOT EXISTS "earthdistance";
        - ALTER SYSTEM SET search_path TO app, public, vectors;
        - ALTER SCHEMA vectors OWNER TO app;
        # run this via kubectl exec in database pod after the schema is created
        #- \c app; GRANT SELECT ON TABLE pg_vector_index_stat TO app;

  storage:
    size: {{ .Values.database.size }}

  {{ if .Values.database.backups.enabled }}
  backup:
    retentionPolicy: {{ .Values.database.backups.retention }}
    barmanObjectStore:
      destinationPath: {{ .Values.database.backups.path | quote }}
      endpointURL: {{ .Values.database.backups.endpoint }}
      s3Credentials:
        accessKeyId:
          name: {{ .Values.database.clusterName }}-backup-credentials
          key: ACCESS_KEY
        secretAccessKey:
          name: {{ .Values.database.clusterName }}-backup-credentials
          key: SECRET_KEY
  {{ end }}
