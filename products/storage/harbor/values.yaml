database:
  clusterName: harbor-postgres
  replicas: 2
  storageClass: ceph-block-nvme-1
  size: 5Gi

harbor:
  expose:
    type: route
    tls:
      enabled: false
    route:
      parentRefs:
        - name: envoy-gateway-public
          namespace: envoy-gateway
          sectionName: web-https
      hosts:
        - harbor.feddema.dev

  externalURL: https://harbor.feddema.dev

  persistence:
    enabled: true
    persistentVolumeClaim:
      registry:
        size: 5Gi
      jobservice:
        jobLog:
          size: 1Gi
      database:
        size: 1Gi
      redis:
        size: 1Gi
      trivy:
        size: 5Gi
    imageChartStorage:
      # Specify whether to disable `redirect` for images and chart storage, for
      # backends which not supported it (such as using minio for `s3` storage type), please disable
      # it. To disable redirects, simply set `disableredirect` to `true` instead.
      # Refer to
      # https://github.com/distribution/distribution/blob/release/2.8/docs/configuration.md#redirect
      # for the detail.
      disableredirect: false

      type: s3
      s3:
        existingSecret: "harbor-s3-credentials"
        region: ''
        bucket: harbor
        regionendpoint: http://rook-ceph-rgw-ceph-object-nvme-2.rook-ceph.svc:80
        secure: false

  existingSecretAdminPassword: "harbor-credentials"
  existingSecretSecretKey: "harbor-credentials"

  ipFamily:
    ipv6:
      enabled: false

  logLevel: info

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

  nginx:
    image:
      repository: docker.io/goharbor/nginx-photon
      tag: dev
    replicas: 1
    revisionHistoryLimit: 0

  portal:
    image:
      repository: docker.io/goharbor/harbor-portal
      tag: dev
    replicas: 1
    revisionHistoryLimit: 0

  core:
    image:
      repository: docker.io/goharbor/harbor-core
      tag: dev
    replicas: 1
    revisionHistoryLimit: 0
    configureUserSettings:
    # The provider for updating project quota(usage), there are 2 options, redis or db.
    # By default it is implemented by db but you can configure it to redis which
    # can improve the performance of high concurrent pushing to the same project,
    # and reduce the database connections spike and occupies.
    # Using redis will bring up some delay for quota usage updation for display, so only
    # suggest switch provider to redis if you were ran into the db connections spike around
    # the scenario of high concurrent pushing to same project, no improvment for other scenes.
    quotaUpdateProvider: db # Or redis
    # Secret is used when core server communicates with other components.
    # If a secret key is not specified, Helm will generate one. Alternatively set existingSecret to use an existing secret
    # Must be a string of 16 chars.
    secret: ""
    # Fill in the name of a kubernetes secret if you want to use your own
    # If using existingSecret, the key must be secret
    existingSecret: ""
    # Fill the name of a kubernetes secret if you want to use your own
    # TLS certificate and private key for token encryption/decryption.
    # The secret must contain keys named:
    # "tls.key" - the private key
    # "tls.crt" - the certificate
    secretName: ""
    # If not specifying a preexisting secret, a secret can be created from tokenKey and tokenCert and used instead.
    # If none of secretName, tokenKey, and tokenCert are specified, an ephemeral key and certificate will be autogenerated.
    # tokenKey and tokenCert must BOTH be set or BOTH unset.
    # The tokenKey value is formatted as a multiline string containing a PEM-encoded RSA key, indented one more than tokenKey on the following line.
    tokenKey: |
    # If tokenKey is set, the value of tokenCert must be set as a PEM-encoded certificate signed by tokenKey, and supplied as a multiline string, indented one more than tokenCert on the following line.
    tokenCert: |
    # The XSRF key. Will be generated automatically if it isn't specified
    # While you specified, Please make sure it is 32 characters, otherwise would have validation issue at the harbor-core runtime
    # https://github.com/goharbor/harbor/pull/21154
    xsrfKey: ""
    # If using existingSecret, the key is defined by core.existingXsrfSecretKey
    existingXsrfSecret: ""
    # If using existingSecret, the key
    existingXsrfSecretKey: CSRF_KEY
    # The time duration for async update artifact pull_time and repository
    # pull_count, the unit is second. Will be 10 seconds if it isn't set.
    # eg. artifactPullAsyncFlushDuration: 10
    artifactPullAsyncFlushDuration:
    gdpr:
      deleteUser: false
      auditLogsCompliant: false

  jobservice:
    image:
      repository: docker.io/goharbor/harbor-jobservice
      tag: dev
    replicas: 1
    revisionHistoryLimit: 0
    maxJobWorkers: 10
    jobLoggers:
      - stdout
    existingSecret: "harbor-credentials"

  registry:
    registry:
      image:
        repository: docker.io/goharbor/registry-photon
        tag: dev
    controller:
      image:
        repository: docker.io/goharbor/harbor-registryctl
        tag: dev
    replicas: 1
    revisionHistoryLimit: 0
    existingSecret: "harbor-credentials"
    credentials:
      existingSecret: "harbor-credentials"

  trivy:
    enabled: true
    image:
      repository: docker.io/goharbor/trivy-adapter-photon
      tag: dev
    replicas: 1
    vulnType: "os,library"
    severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
    insecure: true

  database:
    type: external
    external:
      host: "192.168.0.1"
      port: "5432"
      username: "user"
      password: "password"
      coreDatabase: "registry"
      # if using existing secret, the key must be "password"
      existingSecret: ""
      # "disable" - No SSL
      # "require" - Always SSL (skip verification)
      # "verify-ca" - Always SSL (verify that the certificate presented by the
      # server was signed by a trusted CA)
      # "verify-full" - Always SSL (verify that the certification presented by the
      # server was signed by a trusted CA and the server host name matches the one
      # in the certificate)
      sslmode: "disable"
    # The maximum number of connections in the idle connection pool per pod (core+exporter).
    # If it <=0, no idle connections are retained.
    maxIdleConns: 100
    # The maximum number of open connections to the database per pod (core+exporter).
    # If it <= 0, then there is no limit on the number of open connections.
    # Note: the default number of connections is 1024 for harbor's postgres.
    maxOpenConns: 900
    ## Additional deployment annotations
    podAnnotations: {}
    ## Additional deployment labels
    podLabels: {}

  redis:
    type: internal
    internal:
      image:
        repository: docker.io/goharbor/redis-photon
        tag: dev

  exporter:
    image:
      repository: docker.io/goharbor/harbor-exporter
      tag: dev
    replicas: 1
    revisionHistoryLimit: 0
