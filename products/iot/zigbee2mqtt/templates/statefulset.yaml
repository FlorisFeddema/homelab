apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "common.fullname" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      {{- include "common.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "common.selectorLabels" . | nindent 8 }}
        config-hash: {{ print .Values.config.fileContent | sha1sum  }}
    spec:
      tolerations: {{ toYaml .Values.tolerations | nindent 8 }}
      securityContext: {{ toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: copy-config
          image: "{{ .Values.config.image.registry }}/{{ .Values.config.image.repository }}:{{ .Values.config.image.tag }}"
          imagePullPolicy: IfNotPresent
          command:
            - "sh"
            - "-c"
            - |
              if [ -f /config/configuration.yaml ]; then
                echo "Old config:"
                cat /config/configuration.yaml
                echo "Copy current config to /config/configuration.yaml.old"
                cp /config/configuration.yaml /config/configuration.yaml.old
              fi
              cp /tmp/configuration.yaml /config/configuration.yaml
              echo "==================================="
              echo "New config:"
              cat /config/configuration.yaml
              if [ -f /config/secret.yaml ]; then
                echo "Copy current secrets to /config/secret.yaml.old"
                cp /config/secret.yaml /config/secret.yaml.old
              fi
              cp /tmp/secret.yaml /config/secret.yaml
              touch $files
          env:
            - name: files
              value: "{{ join " " .Values.config.createFiles }}"
          volumeMounts:
            - name: default-config
              mountPath: /tmp/configuration.yaml
              subPath: configuration.yaml
            - name: secret-config
              mountPath: /tmp/secret.yaml
              subPath: secret.yaml
            - name: data
              mountPath: /config
      containers:
        - name: zigbee2mqtt
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          env:
            - name: TZ
              value: "Europe/Amsterdam"
          ports:
            - containerPort: 8080
              protocol: TCP
              name: http
          resources: {{ toYaml .Values.resources | nindent 12 }}
          securityContext: {{ toYaml .Values.securityContext | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
            - mountPath: /app/data
              name: data
      volumes:
        - name: default-config
          configMap:
            name: {{ template "zigbee2mqtt.fullname" . }}
        - name: secret-config
          secret:
            secretName: {{ .Values.config.secret.name }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        labels:
          {{- include "common.selectorLabels" . | nindent 10 }}
          {{ if .Values.persistence.labels }}
          {{ toYaml .Values.persistence.labels | nindent 10 }}
          {{ end }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
