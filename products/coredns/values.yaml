etcd:
  enabled: true
  auth:
    rbac:
      create: false
      enabled: false
      allowNoneAuthentication: true
    token:
      enabled: true
      type: jwt
      privateKey:
        filename: jwt-token.pem
        existingSecret: "coredns-etcd-jwt-token"
    peer:
      secureTransport: true
      useAutoTLS: false
      existingSecret: etcd-peer-tls
      enableAuthentication: true
      certFilename: tls.crt
      certKeyFilename: tls.key
      caFilename: ca.crt
    client:
      secureTransport: true
      useAutoTLS: false
      existingSecret: etcd-client-tls
      enableAuthentication: true
      certFilename: tls.crt
      certKeyFilename: tls.key
      caFilename: ca.crt

  removeMemberOnContainerTermination: false #if true, the etcd pod cannot be restarted after it is terminated
  initialClusterState: "existing" # "new" or "existing"

  replicaCount: 3

  initialClusterToken: "etcd-cluster-coredns"
  logLevel: "error"

  resources: {}

  persistence:
    size: 5Gi
    labels:
      recurring-job-group.longhorn.io/backup: enabled

  networkPolicy:
    enabled: false

  metrics:
    enabled: true
    useSeparateEndpoint: true
    podMonitor:
      enabled: true
      namespace: coredns
    prometheusRule:
      enabled: true
      namespace: coredns

  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: etcd
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: etcd

coredns:
  replicaCount: 3

  resources: {}

  prometheus:
    service:
      enabled: true
    monitor:
      enabled: true

  service:
    clusterIP: '10.96.0.100'

  isClusterService: false

  livenessProbe:
    initialDelaySeconds: 20

  readinessProbe:
    initialDelaySeconds: 20

  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: coredns

  extraVolumes:
    - name: etcd-tls
      secret:
        secretName: etcd-client-tls

  extraVolumeMounts:
    - name: etcd-tls
      mountPath: /tls

  servers:
    - zones:
        - zone: .
      port: 53
      plugins:
        - name: log
        - name: errors
        - name: health
          configBlock: |
            lameduck 5s
        - name: ready
        - name: loop
#        - name: reload # Pods get configmap sha
        - name: loadbalance
        - name: cancel
        - name: prometheus
          parameters: '0.0.0.0:9153'
        - name: etcd
          configBlock: |
            fallthrough
            endpoint coredns-etcd:2379
            tls /tls/tls.cert /tls/tls.key /tls/ca.cert
        - name: forward
          parameters: '. tls://9.9.9.10 tls://149.112.112.10'
          configBlock: |
            policy sequential
            tls_servername dns.quad9.net
        - name: cache
          parameters: '30'
