victoria-metrics-k8s-stack:
  fullnameOverride: vm-stack

  victoria-metrics-operator:
    enabled: true

    operator:
      disable_prometheus_converter: false
      prometheus_converter_add_argocd_ignore_annotations: true

    serviceMonitor:
      enabled: true

  defaultRules:
    create: true
    rules:
      etcd: true
      general: true
      k8s: true
      kubeApiserver: true
      kubeApiserverAvailability: true
      kubeApiserverBurnrate: true
      kubeApiserverHistogram: true
      kubeApiserverSlos: true
      kubelet: false
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeScheduler: true
      kubeStateMetrics: true
      network: true
      node: true
      vmagent: true
      vmsingle: true
      vmhealth: true
      alertmanager: true

  defaultDashboardsEnabled: true
  experimentalDashboardsEnabled: true

  vmsingle:
    enabled: false

  vmcluster:
    enabled: true
    spec:
      retentionPeriod: "120"
      replicationFactor: 1
      vmstorage:
        replicaCount: 2
        storageDataPath: "/vm-data"
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 100Gi
        resources: { }
      vmselect:
        replicaCount: 2
        cacheMountPath: "/select-cache"
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 5Gi
        resources: { }
      vminsert:
        replicaCount: 2
        resources: { }

  alertmanager:
    enabled: true
    spec:
      selectAllByDefault: true
      externalURL: "https://alert.feddema.dev"

      configSecret: "alertmanager-config"

    ingress:
      enabled: true
      hosts:
      - alert.feddema.dev

      tls:
      - secretName: alertmanager-tls
        hosts:
          - alert.feddema.dev

      annotations:
        nginx.ingress.kubernetes.io/auth-url: |-
          http://ak-outpost-authentik-embedded-outpost.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
        nginx.ingress.kubernetes.io/auth-signin: |-
          https://alert.feddema.dev/outpost.goauthentik.io/start?rd=$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: |-
          Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
        nginx.ingress.kubernetes.io/auth-snippet: |
          proxy_set_header X-Forwarded-Host $http_host;
        cert-manager.io/cluster-issuer: letsencrypt-dns

  vmalert:
    enabled: true

    ingress:
      enabled: true
      hosts:
      - vmalert.feddema.dev

      tls:
      - secretName: vmalert-tls
        hosts:
          - vmalert.feddema.dev

      annotations:
        nginx.ingress.kubernetes.io/auth-url: |-
          http://ak-outpost-authentik-embedded-outpost.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
        nginx.ingress.kubernetes.io/auth-signin: |-
          https://vmalert.feddema.dev/outpost.goauthentik.io/start?rd=$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: |-
          Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
        nginx.ingress.kubernetes.io/auth-snippet: |
          proxy_set_header X-Forwarded-Host $http_host;
        cert-manager.io/cluster-issuer: letsencrypt-dns

  vmagent:
    enabled: true
    spec:
      selectAllByDefault: true
      scrapeInterval: 20s
      extraArgs:
        promscrape.streamParse: "true"

  grafana:
    enabled: false

  prometheus-node-exporter:
    enabled: true
    namespaceOverride: prometheus-node-exporter
    prometheus:
      monitor:
        enabled: true

  kube-state-metrics:
    enabled: true
    rbac:
      create: true
    prometheus:
      monitor:
        enabled: true
    selfMonitor:
      enabled: true

  kubelet:
    enabled: false

  kubeApiServer:
    enabled: true

  kubeControllerManager:
    enabled: true
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true
    service:
      selector:
        k8s-app: kube-controller-manager

  coreDns:
    enabled: true

  kubeEtcd:
    enabled: true
    endpoints:
      - 192.168.4.11
      - 192.168.4.12

  kubeScheduler:
    enabled: true

    service:
      selector:
        k8s-app: kube-scheduler
    spec:
      jobLabel: jobLabel
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true

  crds:
    enabled: true
