apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  url: https://argocd.feddema.dev

  hydrator.enabled: "true"

  users.anonymous.enabled: "false"

  accounts.infro: "apiKey"
  accounts.kubechecks: "apiKey"

  admin.enabled: "false"

  timeout.reconciliation: 180s
  cluster.inClusterEnabled: "true"

  resource.exclusions: |
    - apiGroups:
        - cilium.io
      kinds:
        - CiliumIdentity
      clusters:
        - "*"

  resource.customizations.ignoreDifferences.argoproj.io_Application: |
    jqPathExpressions:
    - .metadata.finalizers[]? | select(. == "post-delete-finalizer.argocd.argoproj.io" or . == "post-delete-finalizer.argocd.argoproj.io/cleanup")
    - if (.metadata.finalizers | length) == 0 then .metadata.finalizers else empty end
  
  resource.customizations.health.ceph.rook.io_CephCluster: |
    hs = {}

    if obj.status ~= nil and obj.status.ceph ~= nil then
      local health = obj.status.ceph.health
      if health == "HEALTH_OK" then
        hs.status = "Healthy"
        hs.message = "Ceph health is OK"
      elseif health == "HEALTH_WARN" then
        hs.status = "Progressing"
        hs.message = "Ceph cluster has warnings"
      elseif health == "HEALTH_ERR" then
        hs.status = "Degraded"
        hs.message = "Ceph cluster is in error state"
      else
        hs.status = "Unknown"
        hs.message = "Ceph cluster health: " .. tostring(health)
      end
    else
      hs.status = "Progressing"
      hs.message = "CephCluster status not available"
    end

    return hs
    
  resource.customizations.actions.postgresql.cnpg.io_Cluster: |
    discovery.lua: |
      actions = {}
      actions["restart"] = {}
      actions["reload"] = {}
      actions["failover"] = {}
      return actions

    definitions:
      - name: restart
        action.lua: |
          local os = require("os")
          if obj.metadata == nil then
            obj.metadata = {}
          end
          if obj.metadata.annotations == nil then
            obj.metadata.annotations = {}
          end
          obj.metadata.annotations["kubectl.kubernetes.io/restartedAt"] = os.date("!%Y-%m-%dT%XZ")
          return obj
      - name: reload
        action.lua: |
          local os = require("os")
          if obj.metadata == nil then
            obj.metadata = {}
          end
          if obj.metadata.annotations == nil then
            obj.metadata.annotations = {}
          end
          obj.metadata.annotations["cnpg.io/reloadedAt"] = os.date("!%Y-%m-%dT%XZ")
          return obj
      - name: failover
        action.lua: |
          local os = require("os")
          local nextIndex = 0
          for index, node in pairs(obj.status.instancesStatus.healthy) do
            if node == obj.status.currentPrimary then
              nextIndex = index + 1
              if nextIndex > #obj.status.instancesStatus.healthy then
                nextIndex = 1
              end
              break
            end
          end
          if nextIndex > 0 then
            obj.status.targetPrimary = obj.status.instancesStatus.healthy[nextIndex]
            obj.status.targetPrimaryTimestamp = os.date("!%Y-%m-%dT%XZ")
          end
          return obj

  server.rbac.log.enforce.enable: "false"

  exec.enabled: "true"
  exec.shells: "bash,sh,powershell,cmd"

  oidc.tls.insecure.skip.verify: "false"
  oidc.config: |
    name: Authentik
    issuer: https://authentik.feddema.dev/application/o/argocd/
    clientID: 7uRmOU7Cho0KwDa7SIODe0ugmQ5djIvDuN3wUeux
    clientSecret: $authentik-credentials:clientSecret
    requestedScopes: ["openid", "profile", "email", "groups"]
    logoutURL: https://authentik.feddema.dev/application/o/argocd/end-session/

