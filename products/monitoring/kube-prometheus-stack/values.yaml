kube-prometheus-stack:
  cleanPrometheusOperatorObjectNames: true
  crds:
    enabled: false

  defaultRules:
    rules:
      kubeProxy: false
      etcd: false
      windows: false

  prometheusOperator:
    revisionHistoryLimit: 0
    admissionWebhooks:
      patch:
        ttlSecondsAfterFinished: 15
        
  prometheus:
    prometheusSpec:
      probeSelectorNilUsesHelmValues: false
      scrapeConfigSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false

      retention: 365d
      replicas: 2

      storageSpec:
        volumeClaimTemplate:
          spec:
            resources:
              requests:
                storage: 100Gi

      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/instance: kube-prometheus-stack
              app.kubernetes.io/managed-by: prometheus-operator
              app.kubernetes.io/name: prometheus
              prometheus: kube-prometheus-stack

  alertmanager:
    enabled: true

    alertmanagerSpec:
      useExistingSecret: true
      configSecret: 'alertmanager-config'
      externalUrl: https://alertmanager.feddema.dev

      storage:
       volumeClaimTemplate:
         spec:
           accessModes: ["ReadWriteOnce"]
           resources:
             requests:
               storage: 2Gi

    ingress:
      enabled: true
      hosts:
        - alertmanager.feddema.dev

      tls:
        - secretName: alertmanager-tls
          hosts:
            - alertmanager.feddema.dev

      annotations:
        nginx.ingress.kubernetes.io/auth-url: |-
          http://ak-outpost-authentik-embedded-outpost.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
        nginx.ingress.kubernetes.io/auth-signin: |-
          https://alertmanager.feddema.dev/outpost.goauthentik.io/start?rd=$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: |-
          Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
        nginx.ingress.kubernetes.io/auth-snippet: |
          proxy_set_header X-Forwarded-Host $http_host;
        cert-manager.io/cluster-issuer: letsencrypt-dns

  grafana:
    enabled: false
    forceDeployDatasources: true
    forceDeployDashboards: true
    defaultDashboardsTimezone: Europe/Amsterdam
    defaultDashboardsEditable: false

  kubeEtcd:
    enabled: false

  kubeProxy:
    enabled: false

  kubeScheduler:
    enabled: true
    service:
      selector:
        k8s-app: kube-scheduler
        tier: control-plane
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true

  kubeControllerManager:
    enabled: true
    service:
      selector:
        k8s-app: kube-controller-manager
        tier: control-plane
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true

  kube-state-metrics:
    revisionHistoryLimit: 0
#    metricLabelsAllowlist:
#      - nodes=[topology.kubernetes.io/zone]

  prometheus-node-exporter:
    revisionHistoryLimit: 0
    namespaceOverride: "prometheus-node-exporter"
