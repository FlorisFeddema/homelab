gatus-monitor:
  appName: prometheus
  publicEndpoints:
    - name: prometheus
    - name: alertmanager
    - name: thanos-query
    - name: thanos-bucket
  privateEndpoints:
    - name: prometheus
    - name: alertmanager
    - name: thanos-query
    - name: thanos-bucket

route:
  thanos-query:
    enabled: true
    hostnames:
      - thanos-query.feddema.dev
    backend:
      name: prometheus-thanos-query
      port: 9090
    parentRefs:
      - name: envoy-gateway-public
        namespace: envoy-gateway
        sectionName: web-https

  thanos-bucket:
    enabled: true
    hostnames:
      - thanos-bucket.feddema.dev
    backend:
      name: prometheus-thanos-bucketweb
      port: 8080
    parentRefs:
      - name: envoy-gateway-public
        namespace: envoy-gateway
        sectionName: web-https

kube-prometheus-stack:
  nameOverride: "prometheus"

  cleanPrometheusOperatorObjectNames: true
  crds:
    enabled: false

  defaultRules:
    rules:
      kubeProxy: false
      windows: false

  prometheusOperator:
    revisionHistoryLimit: 0
    logLevel: warn
    admissionWebhooks:
      patch:
        ttlSecondsAfterFinished: 15

  prometheus:
    thanosService:
      enabled: true

    thanosServiceMonitor:
      enabled: true

    prometheusSpec:      
      probeSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      scrapeConfigSelectorNilUsesHelmValues: false

      containers:
        - name: thanos-sidecar
          envFrom:
            - secretRef:
                name: thanos-bucket

      externalUrl: https://prometheus.feddema.dev
      retention: 6h
      replicas: 2
      logLevel: warn

      thanos:
        objectStorageConfig:
          existingSecret:
            key: objstore.yml
            name: thanos-objstore

      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: "ceph-block-nvme-1"
            resources:
              requests:
                storage: 30Gi

      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/instance: prometheus
              app.kubernetes.io/managed-by: prometheus-operator
              app.kubernetes.io/name: prometheus
              prometheus: prometheus

    route:
      main:
        enabled: true
        hostnames:
          - prometheus.feddema.dev
        parentRefs:
          - name: envoy-gateway-public
            namespace: envoy-gateway
            sectionName: web-https

  alertmanager:
    forceDeployDashboards: true

    alertmanagerSpec:
      logLevel: warn
      useExistingSecret: true
      configSecret: 'alertmanager-config'
      externalUrl: https://alertmanager.feddema.dev

      storage:
       volumeClaimTemplate:
         spec:
           storageClassName: "ceph-block-nvme-1"
           accessModes: ["ReadWriteOnce"]
           resources:
             requests:
               storage: 2Gi

    route:
      main:
        enabled: true
        hostnames:
          - alertmanager.feddema.dev
        parentRefs:
          - name: envoy-gateway-public
            namespace: envoy-gateway
            sectionName: web-https

  grafana:
    enabled: false
    forceDeployDashboards: true
    defaultDashboardsTimezone: Europe/Amsterdam
    defaultDashboardsEditable: false

  kubeEtcd:
    service:
      selector:
        k8s-app: kube-controller-manager
    serviceMonitor:
      relabelings:   # Add nodename label
        - sourceLabels: [__meta_kubernetes_pod_node_name]
          separator: ;
          regex: ^(.*)$
          targetLabel: nodename
          replacement: $1
          action: replace
      metricRelabelings:   # Remove pod label
        - action: labeldrop
          regex: pod

  nodeExporter:
    forceDeployDashboards: true

  kubeProxy:
    enabled: false

  kubeScheduler:
    service:
      selector:
        k8s-app: kube-scheduler
        tier: control-plane
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true

  kubeControllerManager:
    enabled: true
    service:
      selector:
        k8s-app: kube-controller-manager
        tier: control-plane
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true

  kube-state-metrics:
    revisionHistoryLimit: 0

    selfMonitor:
      enabled: true

  prometheus-node-exporter:
    revisionHistoryLimit: 0
    namespaceOverride: "prometheus-node-exporter"

thanos:
  existingObjstoreSecret: "thanos-objstore"

  global:
    security:
      allowInsecureImages: true

  image:
    registry: quay.io
    repository: thanos/thanos
    tag: v0.39.2

  query:
    enabled: true
    logLevel: warn
    replicaCount: 2
    extraEnvVarsSecret: "thanos-bucket"
    revisionHistoryLimit: 0
    resources: { }
    replicaLabel:
      - replica
      - prometheus_replica
    dnsDiscovery:
      enabled: true
      sidecarsService: 'prometheus-thanos-discovery'
      sidecarsNamespace: 'prometheus'
    pdb:
      create: false

    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/component: query
            app.kubernetes.io/instance: prometheus
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: thanos

  queryFrontend:
    enabled: false

  bucketweb:
    enabled: true
    logLevel: warn
    extraEnvVarsSecret: "thanos-bucket"
    refresh: 10m
    replicaCount: 2
    revisionHistoryLimit: 0
    resources: { }
    pdb:
      create: false

  compactor:
    enabled: true
    logLevel: info
    extraEnvVarsSecret: "thanos-bucket"
    retentionResolutionRaw: 7d
    retentionResolution5m: 90d
    retentionResolution1h: 0d
    revisionHistoryLimit: 0
    extraFlags:
      - --compact.enable-vertical-compaction
      - --deduplication.replica-label=replica
      - --deduplication.replica-label=prometheus_replica
      - --deduplication.func=penalty
      - --delete-delay=6h
    cronJob:
      enabled: true
      schedule: "10 6 * * *"
      timeZone: "Europe/Amsterdam"
      successfulJobsHistoryLimit: "1"
      failedJobsHistoryLimit: "1"
    resources:
      requests:
        cpu: 300m
        memory: 4500Mi

    persistence:
      ephemeral: true
      storageClass: "ceph-block-nvme-1"
      size: 100Gi

  storegateway:
    enabled: true
    logLevel: warn
    existingConfigmap: ""
    extraEnvVarsSecret: "thanos-bucket"
    replicaCount: 2
    useEndpointGroup: true
    revisionHistoryLimit: 0
    resources: { }
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/component: storegateway
            app.kubernetes.io/instance: prometheus
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: thanos
    pdb:
      create: false
    persistence:
      storageClass: "ceph-block-nvme-1"

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
