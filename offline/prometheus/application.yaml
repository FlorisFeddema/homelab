apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus
  namespace: argocd
  annotations:
    cloud.feddema.dev/helm-updater-skip: "true"
  finalizers: []
#    - resources-finalizer.argocd.argoproj.io

spec:
  project: no-sync
  source:
    chart: prometheus
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 19.3.1

    helm:
      values: |
        alertmanager:
          enabled: true
          useClusterRole: true
          baseURL: "https://alert.cloud.feddema.dev"
          replicaCount: 1

          ingress:
            enabled: true
            annotations:
              nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
              nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
              external-dns.alpha.kubernetes.io/hostname: alert.cloud.feddema.dev
              external-dns.alpha.kubernetes.io/ttl: "120"
              ingress.kubernetes.io/rewrite-target: /
              cert-manager.io/cluster-issuer: letsencrypt
            hosts:
              - host: alert.cloud.feddema.dev
                paths:
                  - path: /
                    pathType: ImplementationSpecific
            tls:
              - secretName: alert-tls
                hosts:
                  - alert.cloud.feddema.dev
        
          persistence:
            enabled: true
            size: 8Gi

          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 10m
              memory: 32Mi
        
        kube-state-metrics:
          enabled: true
          prometheusScrape: true
          replicas: 1

          hostNetwork: false

          rbac:
            create: true

          serviceAccount:
            create: true

          prometheus:
            monitor:
              enabled: false
              additionalLabels: { }
              namespace: ""
              jobLabel: ""
              interval: ""
              sampleLimit: 0
              targetLimit: 0
              labelLimit: 0
              labelNameLengthLimit: 0
              labelValueLengthLimit: 0
              scrapeTimeout: ""
              proxyUrl: ""
              selectorOverride: { }
              honorLabels: false
              metricRelabelings: [ ]
              relabelings: [ ]
              scheme: ""
              tlsConfig: { }

          collectors:
            - certificatesigningrequests
            - configmaps
            - cronjobs
            - daemonsets
            - deployments
            - endpoints
            - horizontalpodautoscalers
            - ingresses
            - jobs
            - leases
            - limitranges
            - mutatingwebhookconfigurations
            - namespaces
            - networkpolicies
            - nodes
            - persistentvolumeclaims
            - persistentvolumes
            - poddisruptionbudgets
            - pods
            - replicasets
            - replicationcontrollers
            - resourcequotas
            - secrets
            - services
            - statefulsets
            - storageclasses
            - validatingwebhookconfigurations
            - volumeattachments

          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 32Mi

          selfMonitor:
            enabled: false
        
        prometheus-node-exporter:
          enabled: true
          hostNetwork: true
          hostPID: true
          hostRootFsMount:
            enabled: true
            mountPropagation: HostToContainer
        
          resources:
            limits:
              memory: 50Mi
            requests:
              cpu: 50m
              memory: 30Mi
        
        configmapReload:
          prometheus:
            enabled: false
        
        server:
          enableServiceLinks: true

          baseURL: "https://prometheus.cloud.feddema.dev"

          configPath: /etc/config/prometheus.yml

          global:
            scrape_interval: 1m
            scrape_timeout: 10s
            evaluation_interval: 1m

          ingress:
            enabled: false

          persistentVolume:
            enabled: true
            mountPath: /data
            size: 300Gi

          replicaCount: 1

          resources:
            limits:
              memory: 768Mi
            requests:
              cpu: 100m
              memory: 512Mi

          retention: "15d"

        prometheus-pushgateway:
          enabled: false

  destination:
    server: https://kubernetes.default.svc
    namespace: prometheus

  revisionHistoryLimit: 2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 5
        maxDuration: 10m

