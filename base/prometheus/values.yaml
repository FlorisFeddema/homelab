crds:
  enabled: false

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: true
    kubeSchedulerRecording: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

global:
  rbac:
    create: true
    createAggregateClusterRoles: false

alertmanager:
  enabled: true

  config:
    route:
      receiver: 'slack'
      routes: []

    receivers:
      - name: 'slack'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/slack-api-url/slack-api-url

  alertmanagerSpec:
    secrets: ['slack-api-url']

grafana:
  enabled: true
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: Europe/Amsterdam

  datasources:
    loki-datasource.yaml:
      apiVersion: 1
      datasources:
        - name: Loki
          type: loki
          access: proxy
          uid: loki
          url: http://loki-gateway.loki.svc.cluster.local
          editable: false

  replicas: 1

  ingress:
    enabled: true
    annotations:
      external-dns.alpha.kubernetes.io/hostname: grafana.cloud.feddema.dev
      external-dns.alpha.kubernetes.io/ttl: "120"
      ingress.kubernetes.io/rewrite-target: /
      cert-manager.io/cluster-issuer: letsencrypt
    path: /
    hosts:
      - grafana.cloud.feddema.dev
    tls:
      - hosts:
          - grafana.cloud.feddema.dev
        secretName: "grafana-tls"

  extraSecretMounts:
    - name: auth-generic-oauth-secret-mount
      secretName: grafana-oauth-credentials
      defaultMode: 0440
      mountPath: /etc/secrets/auth_generic_oauth
      readOnly: true

  grafana.ini:
    auth:
      oauth_allow_insecure_email_lookup: true
    auth.generic_oauth:
      enabled: true
      name: Keycloak
      allow_sign_up: true
      scopes: "openid email profile offline_access roles"
      email_attribute_path: email
      login_attribute_path: username
      name_attribute_path: full_name
      auth_url: "https://auth.cloud.feddema.dev/realms/master/protocol/openid-connect/auth"
      token_url: "https://auth.cloud.feddema.dev/realms/master/protocol/openid-connect/token"
      api_url: "https://auth.cloud.feddema.dev/realms/master/protocol/openid-connect/userinfo"
      client_id: $__file{/etc/secrets/auth_generic_oauth/client_id}
      client_secret: $__file{/etc/secrets/auth_generic_oauth/client_secret}
      allow_assign_grafana_admin: true
      role_attribute_path: contains(realm_access.roles[*], 'admin') && 'GrafanaAdmin' || 'Admin'
    paths:
      data: /var/lib/grafana
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: true
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    server:
      domain: "https://grafana.cloud.feddema.dev"
      root_url: "https://grafana.cloud.feddema.dev"

  sidecar:
    dashboards:
      enabled: true
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
      isDefaultDatasource: true
      uid: prometheus

  serviceMonitor:
    enabled: true

  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

  persistence:
    type: StatefulSet
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 16Gi

  admin:
    existingSecret: "grafana-credentials"
    userKey: admin-user
    passwordKey: admin-password

kubeApiServer:
  enabled: true

kubelet:
  enabled: true
  namespace: kube-system

kubeControllerManager:
  enabled: true

coreDns:
  enabled: true

kubeEtcd:
  enabled: true

kubeScheduler:
  enabled: true

kubeProxy:
  enabled: true

kubeStateMetrics:
  enabled: true

kube-state-metrics:
  rbac:
    create: true
  prometheus:
    monitor:
      enabled: true
  selfMonitor:
    enabled: false

nodeExporter:
  enabled: true

prometheus-node-exporter:
  prometheus:
    monitor:
      enabled: true

prometheusOperator:
  enabled: true

  tls:
    enabled: true
    tlsMinVersion: VersionTLS13
    internalPort: 10250

  admissionWebhooks:
    enabled: true
    annotations:
      argocd.argoproj.io/hook: PreSync
      argocd.argoproj.io/hook-delete-policy: HookSucceeded
    patch:
      enabled: true
      annotations:
        argocd.argoproj.io/hook: PreSync
        argocd.argoproj.io/hook-delete-policy: HookSucceeded

    certManager:
      enabled: true

  serviceAccount:
    create: true

  kubeletService:
    enabled: true
    namespace: kube-system

  serviceMonitor:
    selfMonitor: true

  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 20m
      memory: 64Mi
    
  verticalPodAutoscaler:
    enabled: true

  prometheusConfigReloader:
    resources:
      limits:
        memory: 64Mi
      requests:
        cpu: 20m
        memory: 32Mi

prometheus:
  enabled: true

  serviceAccount:
    create: true
  serviceMonitor:
    selfMonitor: true

  prometheusSpec:
    retention: 730d
    replicas: 1
    shards: 1

    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false

    scrapeInterval: "30s"

    resources:
      limits:
        memory: 4096Mi
      requests:
        cpu: 130m
        memory: 2048Mi

    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 500Gi

cleanPrometheusOperatorObjectNames: true
