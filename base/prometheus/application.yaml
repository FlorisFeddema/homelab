apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io

spec:
  project: always-sync
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 44.2.1

    helm:
      skipCrds: true
      values: |
        defaultRules:
          create: true
          rules:
            alertmanager: true
            etcd: true
            configReloaders: true
            general: true
            k8s: true
            kubeApiserverAvailability: true
            kubeApiserverBurnrate: true
            kubeApiserverHistogram: true
            kubeApiserverSlos: true
            kubeControllerManager: true
            kubelet: true
            kubeProxy: true
            kubePrometheusGeneral: true
            kubePrometheusNodeRecording: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: true
            kubeSchedulerAlerting: true
            kubeSchedulerRecording: true
            kubeStateMetrics: true
            network: true
            node: true
            nodeExporterAlerting: true
            nodeExporterRecording: true
            prometheus: true
            prometheusOperator: true

        global:
          rbac:
            create: true
            createAggregateClusterRoles: false

        alertmanager:
          enabled: true
          serviceAccount:
            create: true

          config:
            global:
              resolve_timeout: 5m
            inhibit_rules:
              - source_matchers:
                  - 'severity = critical'
                target_matchers:
                  - 'severity =~ warning|info'
                equal:
                  - 'namespace'
                  - 'alertname'
              - source_matchers:
                  - 'severity = warning'
                target_matchers:
                  - 'severity = info'
                equal:
                  - 'namespace'
                  - 'alertname'
              - source_matchers:
                  - 'alertname = InfoInhibitor'
                target_matchers:
                  - 'severity = info'
                equal:
                  - 'namespace'
            route:
              group_by: ['namespace']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              receiver: 'null'
              routes:
              - receiver: 'null'
                matchers:
                  - alertname =~ "InfoInhibitor|Watchdog"
            receivers:
            - name: 'null'
            templates:
            - '/etc/alertmanager/config/*.tmpl'
          tplConfig: false

          ingress:
            enabled: true
            annotations:
              nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
              nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
              external-dns.alpha.kubernetes.io/hostname: alert.cloud.feddema.dev
              external-dns.alpha.kubernetes.io/ttl: "120"
              ingress.kubernetes.io/rewrite-target: /
              cert-manager.io/cluster-issuer: letsencrypt
            tls:
              - secretName: alert-tls
                hosts:
                  - alert.cloud.feddema.dev
            hosts:
              - alert.cloud.feddema.dev
            paths:
              - /

          serviceMonitor:
            selfMonitor: true

          alertmanagerSpec:
            logLevel: info
            replicas: 1
            retention: 120h
            storage:
            volumeClaimTemplate:
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 32Gi

            resources:
              limits:
                memory: 128Mi
              requests:
                cpu: 10m
                memory: 32Mi

        grafana:
          enabled: true
          defaultDashboardsEnabled: true
          defaultDashboardsTimezone: Europe/Amsterdam

          replicas: 1

          ingress:
            enabled: true
            annotations:
              external-dns.alpha.kubernetes.io/hostname: grafana.cloud.feddema.dev
              external-dns.alpha.kubernetes.io/ttl: "120"
              ingress.kubernetes.io/rewrite-target: /
              cert-manager.io/cluster-issuer: letsencrypt
            path: /
            hosts:
              - grafana.cloud.feddema.dev
            tls:
              - hosts:
                  - grafana.cloud.feddema.dev
                secretName: "grafana-tls"

          extraSecretMounts:
            - name: auth-generic-oauth-secret-mount
              secretName: grafana-oauth-credentials
              defaultMode: 0440
              mountPath: /etc/secrets/auth_generic_oauth
              readOnly: true
          
          grafana.ini:
            auth.generic_oauth:
                enabled: true
                name: Keycloak
                allow_sign_up: true
                scopes: "openid email profile offline_access roles"
                email_attribute_path: email
                login_attribute_path: username
                name_attribute_path: full_name
                auth_url: "https://auth.cloud.feddema.dev/realms/master/protocol/openid-connect/auth"
                token_url: "https://auth.cloud.feddema.dev/realms/master/protocol/openid-connect/token"
                api_url: "https://auth.cloud.feddema.dev/realms/master/protocol/openid-connect/userinfo"
                client_id: $__file{/etc/secrets/auth_generic_oauth/client_id}
                client_secret: $__file{/etc/secrets/auth_generic_oauth/client_secret}
                allow_assign_grafana_admin: true
                role_attribute_path: contains(realm_access.roles[*], 'admin') && 'GrafanaAdmin' || 'Admin'
            paths:
              data: /var/lib/grafana
              logs: /var/log/grafana
              plugins: /var/lib/grafana/plugins
              provisioning: /etc/grafana/provisioning
            analytics:
              check_for_updates: true
            log:
              mode: console
            grafana_net:
              url: https://grafana.net
            server:
              domain: "https://grafana.cloud.feddema.dev"
              root_url: "https://grafana.cloud.feddema.dev"
              
          sidecar:
            dashboards:
              enabled: true
            datasources:
              enabled: true
              defaultDatasourceEnabled: true
              isDefaultDatasource: true
              uid: prometheus

          serviceMonitor:
            enabled: true
        
          resources:
            limits:
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          
          persistence:
            type: pvc
            enabled: true
            accessModes:
              - ReadWriteOnce
            size: 16Gi

          admin:
            existingSecret: "grafana-credentials"
            userKey: admin-user
            passwordKey: admin-password

        kubeApiServer:
          enabled: true

        kubelet:
          enabled: true
          namespace: kube-system

        kubeControllerManager:
          enabled: true
          service:
            enabled: true
          serviceMonitor:
            enabled: true

        coreDns:
          enabled: true

        kubeEtcd:
          enabled: true
          service:
            enabled: true
          serviceMonitor:
            enabled: true

        kubeScheduler:
          enabled: true
          service:
            enabled: true
          serviceMonitor:
            enabled: true

        kubeProxy:
          enabled: true
          service:
            enabled: true
          serviceMonitor:
            enabled: true

        kubeStateMetrics:
          enabled: true
        kube-state-metrics:
          rbac:
            create: true
          prometheus:
            monitor:
              enabled: true
          selfMonitor:
            enabled: false

        nodeExporter:
          enabled: true

        prometheus-node-exporter:
          prometheus:
            monitor:
              enabled: true

        prometheusOperator:
          enabled: true

          tls:
            enabled: true
            tlsMinVersion: VersionTLS13
            internalPort: 10250

          admissionWebhooks:
            enabled: true
            annotations:
              argocd.argoproj.io/hook: PreSync
              argocd.argoproj.io/hook-delete-policy: HookSucceeded
            patch:
              enabled: false
              annotations:
                argocd.argoproj.io/hook: PreSync
                argocd.argoproj.io/hook-delete-policy: HookSucceeded
                
            certManager:
              enabled: false

          serviceAccount:
            create: true

          kubeletService:
            enabled: true
            namespace: kube-system
            
          serviceMonitor:
            selfMonitor: true

          resources: 
            limits:
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 64Mi

          prometheusConfigReloader:
            resources:
              limits:
                memory: 64Mi
              requests:
                cpu: 20m
                memory: 32Mi

        prometheus:
          enabled: true

          serviceAccount:
            create: true
          serviceMonitor:
            selfMonitor: true

          prometheusSpec:
            retention: 21d
            replicas: 1
            shards: 1
            
            scrapeInterval: "30s"

            resources:
              limits:
                memory: 768Mi
              requests:
                cpu: 100m
                memory: 512Mi

            storageSpec:
            volumeClaimTemplate:
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 300Gi

        cleanPrometheusOperatorObjectNames: true

  destination:
    server: https://kubernetes.default.svc
    namespace: prometheus

  revisionHistoryLimit: 2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 5
        maxDuration: 10m
